    1|       |//
    2|       |//  main.cpp
    3|       |//  assignment3
    4|       |//
    5|       |//  Created by Alex Moyle on 1/15/19.
    6|       |//  Copyright Â© 2019 Alex Moyle. All rights reserved.
    7|       |//
    8|       |
    9|       |#include <iostream>
   10|       |#include <fstream>
   11|       |#include <string>
   12|       |#include <vector>
   13|       |#include <iomanip>
   14|       |#include <sstream>
   15|       |#include <math.h>
   16|       |
   17|       |using namespace std;
   18|       |
   19|  5.92k|#define pdd pair<double, double>
   20|       |
   21|  1.98k|bool inputError(string s) {
   22|  1.98k|    size_t found = s.find_first_not_of("0123456789 ");
   23|  1.98k|    return (found != string::npos);
   24|  1.98k|}
   25|  3.96k|double calculateLength (double x1, double y1, double x2, double y2){
   26|  3.96k|    double distance = 0;
   27|  3.96k|    
   28|  3.96k|    distance = sqrt(pow((x2-x1),2) + pow((y2-y1),2));
   29|  3.96k|    return distance;
   30|  3.96k|}
   31|       |
   32|       |//Returns a vector of doubles with side1 in the [0] all the way up to 4
   33|    990|vector<double> findAllLengths(const vector<double> &al) {
   34|    990|    
   35|    990|    //originx and originy are 0 and 1
   36|    990|    //x1 and y1 are 0 and 1
   37|    990|    //x2 and y2 are 2 and 3
   38|    990|    //x3 and y3 are 4 and 5
   39|    990|    double side1 = calculateLength(al[0], al[1], al[2], al[3]);
   40|    990|    double side2 = calculateLength(al[2], al[3], al[4], al[5]);
   41|    990|    double side3 = calculateLength(al[4], al[5], al[6], al[7]);
   42|    990|    double side4 = calculateLength(al[6], al[7], al[0], al[1]);
   43|    990|    
   44|    990|    vector<double> allLengths;
   45|    990|    allLengths.push_back(side1);
   46|    990|    allLengths.push_back(side2);
   47|    990|    allLengths.push_back(side3);
   48|    990|    allLengths.push_back(side4);
   49|    990|    
   50|    990|    return allLengths;
   51|    990|}
   52|       |
   53|  3.96k|double findSlope(double x1, double y1, double x2, double y2) {
   54|  3.96k|    double vy = y2 - y1;
   55|  3.96k|    double vx = x2 - x1;
   56|  3.96k|    if (vy == 0 || vx == 0) {
   57|    816|        return 0;
   58|    816|    }
   59|  3.14k|    double slope = vy / vx;
   60|  3.14k|    return slope;
   61|  3.14k|}
   62|       |
   63|    990|vector<double> findAllSlopes(const vector<double> &al) {
   64|    990|    
   65|    990|    //originx and originy are 0 and 1
   66|    990|    //x1 and y1 are 0 and 1
   67|    990|    //x2 and y2 are 2 and 3
   68|    990|    //x3 and y3 are 4 and 5
   69|    990|    double slopeOA = findSlope(al[0], al[1], al[2], al[3]);
   70|    990|    double slopeAB = findSlope(al[2], al[3], al[4], al[5]);
   71|    990|    double slopeBC = findSlope(al[4], al[5], al[6], al[7]);
   72|    990|    double slopeCO = findSlope(al[6], al[7], al[0], al[1]);
   73|    990|    
   74|    990|    vector<double> allSlopes;
   75|    990|    allSlopes.push_back(slopeOA);
   76|    990|    allSlopes.push_back(slopeAB);
   77|    990|    allSlopes.push_back(slopeBC);
   78|    990|    allSlopes.push_back(slopeCO);
   79|    990|    
   80|    990|    return allSlopes;
   81|    990|}
   82|       |
   83|    456|bool areLengthsEqual(vector<double> &allLengths) {
   84|    456|    double len1 = allLengths[0];
   85|    456|    double len2 = allLengths[1];
   86|    456|    double len3 = allLengths[2];
   87|    456|    double len4 = allLengths[0];
   88|    456|    if (len1 == len2 && len1 == len3 && len1 == len4) {
   89|    100|        return true;
   90|    100|    }
   91|    356|    return false;
   92|    356|}
   93|       |
   94|    546|bool areSlopesEqual(vector<double> &allSlopes) {
   95|    546|    double s1 = allSlopes[0];
   96|    546|    double s2 = allSlopes[1];
   97|    546|    double s3 = allSlopes[2];
   98|    546|    double s4 = allSlopes[3];
   99|    546|    if (s1 == s2 && s1 == s3 && s1 == s4) {
  100|    280|        return true;
  101|    280|    }
  102|    266|    return false;
  103|    266|}
  104|       |
  105|    622|bool isParallelogram(vector<double> &allSlopes) {
  106|    622|    
  107|    622|    if (allSlopes[0] == allSlopes[2] && allSlopes[1] == allSlopes[3] && allSlopes[0] != allSlopes[1]) {
  108|      0|        return true;
  109|      0|    }
  110|    622|    return false;
  111|    622|}
  112|       |
  113|    356|bool isRectangle(vector<double> &allLengths, vector<double> &allSlopes) {
  114|    356|    
  115|    356|    if (allLengths[0] == allLengths[2] && allLengths[1] == allLengths[3] && areSlopesEqual(allSlopes)) {
  116|     90|        return true;
  117|     90|    }
  118|    266|    return false;
  119|    266|}
  120|       |
  121|    356|bool isRhombus(vector<double> &allLengths, vector<double> &allSlopes) {
  122|    356|    
  123|    356|    if (!isParallelogram(allSlopes)) {
  124|    356|        return false;
  125|    356|    }
  126|      0|    if ((allSlopes[0] != allSlopes[1]) && areLengthsEqual(allLengths)) {
  127|      0|        return true;
  128|      0|    }
  129|      0|    return false;
  130|      0|}
  131|       |
  132|    264|bool isKite(vector<double> &allLengths) {
  133|    264|    
  134|    264|    int counter = 0;
  135|    264|    if (allLengths[0] == allLengths[1] || allLengths[0] == allLengths[3]) counter++;
  136|    264|    if (allLengths[1] == allLengths[2] || allLengths[2] == allLengths[3]) counter++;
  137|    264|    if (counter == 2) {
  138|      0|        return true;
  139|      0|    }
  140|    264|    return false;
  141|    264|}
  142|       |
  143|    266|bool isTrapezoid(vector<double> &allSlopes) {
  144|    266|    
  145|    266|    if ((allSlopes[0] == allSlopes[2]) || (allSlopes[1] == allSlopes[3])) {
  146|      2|        return true;
  147|      2|    }
  148|    264|    return false;
  149|    264|}
  150|       |
  151|    456|bool isSquare(vector<double> &allLengths, vector<double> &allSlopes) {
  152|    456|    
  153|    456|    int counter = 0;
  154|    456|    if (areLengthsEqual(allLengths)) counter++;
  155|    456|    if (areSlopesEqual(allSlopes)) counter++;
  156|    456|    if (counter == 2) {
  157|    100|        return true;
  158|    100|    }
  159|    356|    return false;
  160|    356|}
  161|       |
  162|       |//Only outputs one line of data at a time
  163|  1.98k|vector<double> parseQuadData(const string input) {
  164|  1.98k|    
  165|  1.98k|    if (inputError(input)) {
  166|      0|        cout << "error 1" << endl;
  167|      0|        exit(EXIT_FAILURE);
  168|      0|    }
  169|  1.98k|    istringstream iss(input);
  170|  1.98k|    //    vector<string> data(istream_iterator<string>{iss}, istream_iterator<string>());
  171|  1.98k|    
  172|  1.98k|    vector<string> results;
  173|  1.98k|    vector<double> parsedLine;
  174|  1.98k|    
  175|  13.8k|    for (string input; iss>>input;)
  176|  11.8k|        results.push_back(input);
  177|  1.98k|    parsedLine.push_back(0.0);
  178|  1.98k|    parsedLine.push_back(0.0);
  179|  13.8k|    for (int i = 0; i < results.size(); i++) {
  180|  11.8k|        parsedLine.push_back(stod(results[i]));
  181|  11.8k|    }
  182|  1.98k|    return parsedLine;
  183|  1.98k|}
  184|       |
  185|       |//"error 1" -- if the line contains the wrong number of points, contains invalid characters, has coordinates out of the
  186|       |//range 0..100, or otherwise fails to describe three points (six integer values)
  187|    990|bool isError1(const string numbers) {
  188|    990|    
  189|    990|    vector<double> input = parseQuadData(numbers);
  190|  7.92k|    for (double d : input) {
  191|  7.92k|        if (d > 100 || d < 0) {
  192|      0|            return true;
  193|      0|        }
  194|  7.92k|    }
  195|    990|    if (input.size() != 8) {
  196|      0|        return true;
  197|      0|    }
  198|    990|    return false;
  199|    990|}
  200|       |
  201|       |//"error 2" -- if any two points coincide
  202|    990|bool isError2(vector<double> points) {
  203|    990|    vector<double> A = {points[0], points[1]};
  204|    990|    vector<double> B = {points[2], points[3]};
  205|    990|    vector<double> C = {points[4], points[5]};
  206|    990|    vector<double> D = {points[6], points[7]};
  207|    990|    
  208|    990|    if (A == B || A == C || A == D || B == C || B == D || C == D) {
  209|      1|        return true;
  210|      1|    }
  211|    989|    return false;
  212|    989|}
  213|       |
  214|       |//"error 3" -- if any three points are colinear
  215|       |//A1 and A2 are 0 and 1
  216|       |//B1 and B2 are 2 and 3
  217|       |//C1 and C2 are 4 and 5
  218|       |//D1 and D2 are 6 and 7
  219|  1.97k|pdd lineLineIntersection (pdd A, pdd B, pdd C, pdd D) {
  220|  1.97k|    // Line AB represented as a1x + b1y = c1
  221|  1.97k|    double a1 = B.second - A.second;
  222|  1.97k|    double b1 = A.first - B.first;
  223|  1.97k|    double c1 = a1*(A.first) + b1*(A.second);
  224|  1.97k|    
  225|  1.97k|    // Line CD represented as a2x + b2y = c2d
  226|  1.97k|    double a2 = D.second - C.second;
  227|  1.97k|    double b2 = C.first - D.first;
  228|  1.97k|    double c2 = a2*(C.first)+ b2*(C.second);
  229|  1.97k|    
  230|  1.97k|    double determinant = a1*b2 - a2*b1;
  231|  1.97k|    
  232|  1.97k|    if (determinant == 0)
  233|    383|    {
  234|    383|        // The lines are parallel. This is simplified
  235|    383|        // by returning a pair of FLT_MAX
  236|    383|        return make_pair((double)__FLT_MAX__, (double)__FLT_MAX__);
  237|    383|    }
  238|  1.59k|    else
  239|  1.59k|    {
  240|  1.59k|        double x = (b2*c1 - b1*c2)/determinant;
  241|  1.59k|        double y = (a1*c2 - a2*c1)/determinant;
  242|  1.59k|        return make_pair(x, y);
  243|  1.59k|    }
  244|  1.97k|}
  245|       |
  246|    988|bool isError3 (const vector<double> &coords){
  247|    988|    pdd A = make_pair(coords[0], coords[1]);
  248|    988|    pdd B = make_pair(coords[2], coords[3]);
  249|    988|    pdd C = make_pair(coords[4], coords[5]);
  250|    988|    pdd D = make_pair(coords[6], coords[7]);
  251|    988|    
  252|    988|    //line AB BC CD DA
  253|    988|    pdd intersection1 = lineLineIntersection(A, B, C, D);
  254|    988|    pdd intersection2 = lineLineIntersection(A, D, C, B);
  255|    988|    
  256|    988|    int xMax = coords[0];
  257|    988|    int yMax = coords[1];
  258|    988|    
  259|  3.95k|    for(int i=2; i<coords.size(); i+=2){
  260|  2.96k|        if(coords[i]>xMax){
  261|  1.64k|            xMax=coords[i];
  262|  1.64k|        }
  263|  2.96k|    }
  264|    988|    
  265|  3.95k|    for(int i=3; i<coords.size(); i+=2){
  266|  2.96k|        if(coords[i]>yMax){
  267|  1.62k|            yMax=coords[i];
  268|  1.62k|        }
  269|  2.96k|    }
  270|    988|    if (intersection1.first<xMax && intersection1.second<yMax && intersection1.first>0 && intersection1.second>0){
  271|    452|        //if intersection y > AB max y
  272|    452|        if(intersection1.second > coords[3]){
  273|     99|            return false;
  274|     99|        }
  275|    353|        return true;
  276|    353|    }
  277|    536|    if(intersection2.first<xMax && intersection2.second<yMax && intersection2.second>0 && intersection2.second>0){
  278|    179|        return true;
  279|    179|    }
  280|    357|    return false;
  281|    357|}
  282|       |
  283|  3.95k|bool collinear(int x1, int y1, int x2, int y2, int x3, int y3) {
  284|  3.95k|    int a = x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2);
  285|  3.95k|    if (a == 0) {
  286|      1|        return true;
  287|      1|    }
  288|  3.95k|    return false;
  289|  3.95k|}
  290|       |
  291|       |//"error 4" -- if any three points are colinear
  292|       |//x0 and y0 are 0 and 1
  293|       |//x1 and y1 are 2 and 3
  294|       |//x2 and y2 are 4 and 5
  295|       |//x3 and y3 are 6 and 7
  296|    989|bool isError4(vector<double> d) {
  297|    989|    
  298|    989|    bool abc = collinear(d[0], d[1], d[2], d[3], d[4], d[5]);
  299|    989|    bool bcd = collinear(d[2], d[3], d[4], d[5], d[6], d[7]);
  300|    989|    bool cda = collinear(d[4], d[5], d[6], d[7], d[0], d[1]);
  301|    989|    bool dab = collinear(d[6], d[7], d[0], d[1], d[2], d[3]);
  302|    989|    
  303|    989|    if (abc == true || bcd == true || cda == true || dab == true) {
  304|      1|        return true;
  305|      1|    }
  306|    988|    return false;
  307|    988|}
  308|       |
  309|       |
  310|       |
  311|    456|void determineShape(vector<double> &allLengths, vector<double> &allSlopes) {
  312|    456|    if (isSquare(allLengths, allSlopes)) {
  313|    100|        cout << "square" << endl;
  314|    356|    } else if (isRhombus(allLengths, allSlopes)) {
  315|      0|        cout << "rhombus" << endl;
  316|    356|    } else if (isRectangle(allLengths, allSlopes)) {
  317|     90|        cout << "rectangle" << endl;
  318|    266|    } else if (isParallelogram(allSlopes)) {
  319|      0|        cout << "parallelogram" << endl;
  320|    266|    } else if (isTrapezoid(allSlopes)) {
  321|      2|        cout << "trapezoid" << endl;
  322|    264|    } else if (isKite(allLengths)) {
  323|      0|        cout << "kite" << endl;
  324|    264|    } else {
  325|    264|        cout << "quadrilateral" << endl;
  326|    264|    }
  327|    456|}
  328|       |
  329|    802|int main(int argc, const char * argv[]) {
  330|    802|    
  331|    802|    vector<double> coorList;
  332|    802|    
  333|    802|    string line;
  334|    802|    vector<double> coordinates;
  335|  1.25k|    while (getline(cin, line)) {
  336|    990|        coordinates = parseQuadData(line);
  337|    990|        if (line == "") {
  338|      0|            cout << "error 1" << endl;
  339|      0|            exit(EXIT_FAILURE);
  340|      0|        }
  341|    990|        vector<double> coorLen = findAllLengths(coordinates);
  342|    990|        vector<double> allSlopes = findAllSlopes(coordinates);
  343|    990|        if (isError1(line)) {
  344|      0|            cout << "error 1" << endl;
  345|      0|            exit(EXIT_FAILURE);
  346|      0|        }
  347|    990|        if (isError2(coordinates)) {
  348|      1|            cout << "error 2" << endl;
  349|      1|            exit(EXIT_FAILURE);
  350|      1|        }
  351|    989|        if (isError4(coordinates)) {
  352|      1|            cout << "error 4" << endl;
  353|      1|            exit(EXIT_FAILURE);
  354|      1|        }
  355|    988|        if (isError3(coordinates)) {
  356|    532|            cout << "error 3" << endl;
  357|    532|            exit(EXIT_FAILURE);
  358|    532|        }
  359|    456|        determineShape(coorLen, allSlopes);
  360|    456|    }
  361|    802|    return 0;
  362|    802|}

